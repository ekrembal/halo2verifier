// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/Halo2Verifier.sol";

contract CounterTest is Test {
    Halo2Verifier public verifier;

    function setUp() public {
        verifier = new Halo2Verifier();
    }

    function test_proof() public {
        bytes
            memory proof = hex"0000000000000000000000000000000000000000000000000000000000000001005b61cb8beedbdcf290b6bfd0bbbc6a20e0b3f84c15316bbde076abdc318816241aaa1799c462e570bd143d85664a73a5eb579ea36d8513114ac0b57cfd469c0a3f88f399bc82c6f0a7a17a1411af941f57a2c4dc0d08e5ebaf7c59cd4e1dde1ab51c2f3e970c48e205655bc0d67f68628f6d26087f4327aa8cd230324617012d350e9a9d33fe3416157c33ee9a3dc29718721e13bf927a70d6e25d6b1b1adb1fdcb198addb2f11a6bec6b4454642c80bf7317161963807cb40bead7edc6bee0ac3947309927fabdcbb823859e66d4bb6eea2e49ef421a91f0c6caff3d173e8111058461f89377f4b8bd381d9e0a1188062aa0e88096b5529151742f4be6da313cd9149b38df49e51de7ea8481d47030b9a7e67724b10a63367f33e00b87f6e044d905212cdd4e3ac8e66caebdb491bb143cfe1cad76939c285f9db9526a0602eedc79834f026e841d20b05957a5a66959a901676914984a59acb661bd8aaeb2b718eb46386111283c090754553e3a6b802717346e606cfcfd5ce5134b3280f18a550f7c7ad8ec0d0877ef05951e33c6a123d653ed5957d23458abaaed66f4d10f97f6196313e6e43e83915e451534e370d804b8784c8b8dced5055c5b5269120a3ea880341fc6f590cc26358e351635b60470411195049b7d241c88c6b69d40380c2279f2b2fcbd02d358167e7f64b374cd5f72d67e4c32d9a2710cf91fb0d1f722799a0947f910355718ac6c701b6c718b365c9532627bce452a121529f8c0b355abc7068997e82e56a3a5f9278cd9560bf6fcffa11a559f60fb707aaad4b06c6479a9b4593dfdf5e62638010bd9675e7f68142d74edae3e27b68ffb0953f09233d80cbf1c67bc757fb72fea129ac3b5f762003259ac8378d254ed3e1d4c807c67a2ff2e6f5c15dfc9a721a189cc2ddbfd9972a2c1b65e7b0f0753e80b0fe2efc10e4468e216e12b40bf0cf7e3774b5a05db4cfd2cedc4a0f687ecf14b340049f64df47ca259cea793230a3047c83363cdba8a402fc47f13312822b5863b321e4ea089bddc5aecc53e82ae4385875208eb2e57b3b427e9fedc8e519fe0a0e14caa5f72661c5e3c893f8846fdd081299f272d4ab4d13c558f66c682fbd2a9b1353eddda9c864e85ca31cc1388247dff61db2d718b987bb961146a0351df9d203d6aaca38af9b719ac3eccecfc0b5dc455a55c9bdd5faa68c5ad192617b70432d6af4a2e858e058bb0626abb3723753ddbfa546b692f5c31768f89209ba81201e2bc9a7732ac6d9d87f97113ac71f75383bbadf097b2a145d9e08bcc284d3a52c730c58d6bce50527f10ea4ef4fb5863dedaba71a6e7a8fe7387a1e6144be872b9939aeb950057f99fbddee411b05b010c739ccbdd89b38de155b28ddcb98ea191ce90600a9530859434473ad24c3caec2c2d24ca456b7e502327d0ee2b96a819c08aa2db541d63504b6597c282c1117b7769701625314c7a63c44d5ed01db51f104ea9d2e3d5bb59d7134f49f6958c4d3cbfba0add1ed038af78ddcd49072627600e96aebd95688c21463294974eb3536517a3509a410f1b16cd57168f633d06fb0236b4fda15f93f71cf06a85608056c782ef3b7386b01d12213fd7622736298e5c83f9df97af8c297b3d40ea2db457f3a124bf63a465b9308141b8c4d80c21d55b84e13d9bd7d7e3719fb488d8fdf5e23bb2ea68f8e9628dbb04867d3585130a93ad37943f176d6e99d9bcd0cc81570fbf3b9808b0f0f5de09f5414f2c5f18350ba6bbbd4710606543accc7951add5e5122449ef5ce16e2c3463fb80c5861949e846ded35a226f76a428c94091b275d9df946384102c5bdb02a11ff1e38712e3a0f8878b22087bd1d7edfc94f4bc887a924eee5f93b872d8ea9e48b87384104216554891b6cd96542d33c842c9f8b3376456b356ca0f36f0bbab8f627794300c1081955448b896264d80ca9a8b2c3a58e33bd1306fefe8897645db7bfeb807e1b46c76cce41563c89c4583f5d51c793505eb8cf1e7893c2bb1b0a31dc8470d7bf11c68509aadfefbe1914db6508909721e993eafdcac5d2a60a75cd9de0127952aa00888ab3e400b5e7b5dc834806812ff5d71f4985db008eb6dcd6425ca277cd84264967ac8db8356e53d8ffede798d5084a210b08b97d89c62348e72e90f8a3075ccf63c52c46d0449269f28af8d277577f545d1634b13cd9c6adc3ec402d4aedee88cb79bd4551bacc4a7cd1fc6ef5efa508ee03b4018db9fd2f3a0a40ed91f82f3b2ef236e273d382d6e46edcbb7e5c57858b84e4b4e947190a89673007bdf651548d64739f3a41ee7b66dd0895e996c9412cfd97fbe1ea934d78f5f1ba6f36d0604ca65f473a5c43970de01ac9b1efca29fb0d82edd46d06ecf7b8e0d354223e6d919ba897534a059ffde1ba1fe1d967084e031f7971dfaa5129d1b29c00b574e223baf933bcebaae30374bc36425a5951b1920ea0bb50ebbfb3e2d07bf046ab99507ae45195868cb05442e36ae7815edd1e22356b6e9a69aac2e990d89f8ef0ca9849fd5507296e00ed521beaed60aed5cdc2d87028ccf701ccda7167e1e0f906ec86f0ed4d95edf0d724f2fcf7153a615656533e0c9b35692938426ea9455fa50f261e1e9a46b84d1515cdd6a1c21c50db2c5acd9c293000c646c045d396679f5659f91a3c13a698356776b59c94a2917df8d72584368ee6cf1821c0fe17094ef264b8eb8c4e26ad8f266257072fd45ebbf86f5d667eaafb109442a392949a1ba24965f84a44581d9246adb972d9326094b778ebf9f4688b51dc7";
        (bool success, bytes memory returnData) = address(verifier).staticcall(proof);
        assertEq(success, true);
    }
}
