// SPDX-License-Identifier: MIT

pragma solidity >=0.8.19 <0.8.21;

contract Halo2Verifier {
    fallback(bytes calldata) external returns (bytes memory) {
        assembly {
            let success := true
            let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid {
                {
                    let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let is_affine := eq(x_cube_plus_3, y_square)
                    valid := and(valid, is_affine)
                }
            }
            mstore(0x20, mod(calldataload(0x0), f_q))
mstore(0x0, 19553409540574905825041541424439277366031884714153649132660619043867942034458)

        {
            let x := calldataload(0x20)
            mstore(0x40, x)
            let y := calldataload(0x40)
            mstore(0x60, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x60)
            mstore(0x80, x)
            let y := calldataload(0x80)
            mstore(0xa0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0xa0)
            mstore(0xc0, x)
            let y := calldataload(0xc0)
            mstore(0xe0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x100, keccak256(0x0, 256))
{
            let hash := mload(0x100)
            mstore(0x120, mod(hash, f_q))
            mstore(0x140, hash)
        }

        {
            let x := calldataload(0xe0)
            mstore(0x160, x)
            let y := calldataload(0x100)
            mstore(0x180, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x120)
            mstore(0x1a0, x)
            let y := calldataload(0x140)
            mstore(0x1c0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x1e0, keccak256(0x140, 160))
{
            let hash := mload(0x1e0)
            mstore(0x200, mod(hash, f_q))
            mstore(0x220, hash)
        }
mstore8(576, 1)
mstore(0x240, keccak256(0x220, 33))
{
            let hash := mload(0x240)
            mstore(0x260, mod(hash, f_q))
            mstore(0x280, hash)
        }

        {
            let x := calldataload(0x160)
            mstore(0x2a0, x)
            let y := calldataload(0x180)
            mstore(0x2c0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x1a0)
            mstore(0x2e0, x)
            let y := calldataload(0x1c0)
            mstore(0x300, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x1e0)
            mstore(0x320, x)
            let y := calldataload(0x200)
            mstore(0x340, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x220)
            mstore(0x360, x)
            let y := calldataload(0x240)
            mstore(0x380, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x260)
            mstore(0x3a0, x)
            let y := calldataload(0x280)
            mstore(0x3c0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x3e0, keccak256(0x280, 352))
{
            let hash := mload(0x3e0)
            mstore(0x400, mod(hash, f_q))
            mstore(0x420, hash)
        }

        {
            let x := calldataload(0x2a0)
            mstore(0x440, x)
            let y := calldataload(0x2c0)
            mstore(0x460, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x2e0)
            mstore(0x480, x)
            let y := calldataload(0x300)
            mstore(0x4a0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x320)
            mstore(0x4c0, x)
            let y := calldataload(0x340)
            mstore(0x4e0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x500, keccak256(0x420, 224))
{
            let hash := mload(0x500)
            mstore(0x520, mod(hash, f_q))
            mstore(0x540, hash)
        }
mstore(0x560, mod(calldataload(0x360), f_q))
mstore(0x580, mod(calldataload(0x380), f_q))
mstore(0x5a0, mod(calldataload(0x3a0), f_q))
mstore(0x5c0, mod(calldataload(0x3c0), f_q))
mstore(0x5e0, mod(calldataload(0x3e0), f_q))
mstore(0x600, mod(calldataload(0x400), f_q))
mstore(0x620, mod(calldataload(0x420), f_q))
mstore(0x640, mod(calldataload(0x440), f_q))
mstore(0x660, mod(calldataload(0x460), f_q))
mstore(0x680, mod(calldataload(0x480), f_q))
mstore(0x6a0, mod(calldataload(0x4a0), f_q))
mstore(0x6c0, mod(calldataload(0x4c0), f_q))
mstore(0x6e0, mod(calldataload(0x4e0), f_q))
mstore(0x700, mod(calldataload(0x500), f_q))
mstore(0x720, mod(calldataload(0x520), f_q))
mstore(0x740, mod(calldataload(0x540), f_q))
mstore(0x760, mod(calldataload(0x560), f_q))
mstore(0x780, mod(calldataload(0x580), f_q))
mstore(0x7a0, mod(calldataload(0x5a0), f_q))
mstore(0x7c0, mod(calldataload(0x5c0), f_q))
mstore(0x7e0, mod(calldataload(0x5e0), f_q))
mstore(0x800, mod(calldataload(0x600), f_q))
mstore(0x820, mod(calldataload(0x620), f_q))
mstore(0x840, mod(calldataload(0x640), f_q))
mstore(0x860, mod(calldataload(0x660), f_q))
mstore(0x880, mod(calldataload(0x680), f_q))
mstore(0x8a0, mod(calldataload(0x6a0), f_q))
mstore(0x8c0, mod(calldataload(0x6c0), f_q))
mstore(0x8e0, mod(calldataload(0x6e0), f_q))
mstore(0x900, mod(calldataload(0x700), f_q))
mstore(0x920, mod(calldataload(0x720), f_q))
mstore(0x940, mod(calldataload(0x740), f_q))
mstore(0x960, keccak256(0x540, 1056))
{
            let hash := mload(0x960)
            mstore(0x980, mod(hash, f_q))
            mstore(0x9a0, hash)
        }
mstore8(2496, 1)
mstore(0x9c0, keccak256(0x9a0, 33))
{
            let hash := mload(0x9c0)
            mstore(0x9e0, mod(hash, f_q))
            mstore(0xa00, hash)
        }

        {
            let x := calldataload(0x760)
            mstore(0xa20, x)
            let y := calldataload(0x780)
            mstore(0xa40, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xa60, keccak256(0xa00, 96))
{
            let hash := mload(0xa60)
            mstore(0xa80, mod(hash, f_q))
            mstore(0xaa0, hash)
        }

        {
            let x := calldataload(0x7a0)
            mstore(0xac0, x)
            let y := calldataload(0x7c0)
            mstore(0xae0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xb00, mulmod(mload(0x520), mload(0x520), f_q))
mstore(0xb20, mulmod(mload(0xb00), mload(0xb00), f_q))
mstore(0xb40, mulmod(mload(0xb20), mload(0xb20), f_q))
mstore(0xb60, mulmod(mload(0xb40), mload(0xb40), f_q))
mstore(0xb80, mulmod(mload(0xb60), mload(0xb60), f_q))
mstore(0xba0, mulmod(mload(0xb80), mload(0xb80), f_q))
mstore(0xbc0, mulmod(mload(0xba0), mload(0xba0), f_q))
mstore(0xbe0, mulmod(mload(0xbc0), mload(0xbc0), f_q))
mstore(0xc00, mulmod(mload(0xbe0), mload(0xbe0), f_q))
mstore(0xc20, mulmod(mload(0xc00), mload(0xc00), f_q))
mstore(0xc40, mulmod(mload(0xc20), mload(0xc20), f_q))
mstore(0xc60, mulmod(mload(0xc40), mload(0xc40), f_q))
mstore(0xc80, mulmod(mload(0xc60), mload(0xc60), f_q))
mstore(0xca0, mulmod(mload(0xc80), mload(0xc80), f_q))
mstore(0xcc0, mulmod(mload(0xca0), mload(0xca0), f_q))
mstore(0xce0, mulmod(mload(0xcc0), mload(0xcc0), f_q))
mstore(0xd00, mulmod(mload(0xce0), mload(0xce0), f_q))
mstore(0xd20, mulmod(mload(0xd00), mload(0xd00), f_q))
mstore(0xd40, addmod(mload(0xd20), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0xd60, mulmod(mload(0xd40), 21888159374819042681065900960079108671330771976540605510559380874944847741953, f_q))
mstore(0xd80, mulmod(mload(0xd60), 7310587191487482613389628690976703164033126240759264491908912333706168173225, f_q))
mstore(0xda0, addmod(mload(0x520), 14577655680351792608856777054280571924515238159656769851789291852869640322392, f_q))
mstore(0xdc0, mulmod(mload(0xd60), 9798514389911400568976296423560720718971335345616984532185711118739339214189, f_q))
mstore(0xde0, addmod(mload(0x520), 12089728481927874653270109321696554369577029054799049811512493067836469281428, f_q))
mstore(0xe00, mulmod(mload(0xd60), 21597602092741825212172446666303273253818825148250162481134447417972994544804, f_q))
mstore(0xe20, addmod(mload(0x520), 290640779097450010073959078954001834729539252165871862563756768602813950813, f_q))
mstore(0xe40, mulmod(mload(0xd60), 5857228514216831962358810454360739186987616060007133076514874820078026801648, f_q))
mstore(0xe60, addmod(mload(0x520), 16031014357622443259887595290896535901560748340408901267183329366497781693969, f_q))
mstore(0xe80, mulmod(mload(0xd60), 15837174511167031493871940795515473313759957271874477857633393696392913897559, f_q))
mstore(0xea0, addmod(mload(0x520), 6051068360672243728374464949741801774788407128541556486064810490182894598058, f_q))
mstore(0xec0, mulmod(mload(0xd60), 11402394834529375719535454173347509224290498423785625657829583372803806900475, f_q))
mstore(0xee0, addmod(mload(0x520), 10485848037309899502710951571909765864257865976630408685868620813772001595142, f_q))
mstore(0xf00, mulmod(mload(0xd60), 6363119021782681274480715230122258277189830284152385293217720612674619714422, f_q))
mstore(0xf20, addmod(mload(0x520), 15525123850056593947765690515135016811358534116263649050480483573901188781195, f_q))
mstore(0xf40, mulmod(mload(0xd60), 1, f_q))
mstore(0xf60, addmod(mload(0x520), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
{
            let prod := mload(0xda0)

                prod := mulmod(mload(0xde0), prod, f_q)
                mstore(0xf80, prod)
            
                prod := mulmod(mload(0xe20), prod, f_q)
                mstore(0xfa0, prod)
            
                prod := mulmod(mload(0xe60), prod, f_q)
                mstore(0xfc0, prod)
            
                prod := mulmod(mload(0xea0), prod, f_q)
                mstore(0xfe0, prod)
            
                prod := mulmod(mload(0xee0), prod, f_q)
                mstore(0x1000, prod)
            
                prod := mulmod(mload(0xf20), prod, f_q)
                mstore(0x1020, prod)
            
                prod := mulmod(mload(0xf60), prod, f_q)
                mstore(0x1040, prod)
            
                prod := mulmod(mload(0xd40), prod, f_q)
                mstore(0x1060, prod)
            
        }
mstore(0x10a0, 32)
mstore(0x10c0, 32)
mstore(0x10e0, 32)
mstore(0x1100, mload(0x1060))
mstore(0x1120, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x1140, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x10a0, 0xc0, 0x1080, 0x20), 1), success)
{
            
            let inv := mload(0x1080)
            let v
        
                    v := mload(0xd40)
                    mstore(3392, mulmod(mload(0x1040), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xf60)
                    mstore(3936, mulmod(mload(0x1020), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xf20)
                    mstore(3872, mulmod(mload(0x1000), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xee0)
                    mstore(3808, mulmod(mload(0xfe0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xea0)
                    mstore(3744, mulmod(mload(0xfc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xe60)
                    mstore(3680, mulmod(mload(0xfa0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xe20)
                    mstore(3616, mulmod(mload(0xf80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xde0)
                    mstore(3552, mulmod(mload(0xda0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0xda0, inv)

        }
mstore(0x1160, mulmod(mload(0xd80), mload(0xda0), f_q))
mstore(0x1180, mulmod(mload(0xdc0), mload(0xde0), f_q))
mstore(0x11a0, mulmod(mload(0xe00), mload(0xe20), f_q))
mstore(0x11c0, mulmod(mload(0xe40), mload(0xe60), f_q))
mstore(0x11e0, mulmod(mload(0xe80), mload(0xea0), f_q))
mstore(0x1200, mulmod(mload(0xec0), mload(0xee0), f_q))
mstore(0x1220, mulmod(mload(0xf00), mload(0xf20), f_q))
mstore(0x1240, mulmod(mload(0xf40), mload(0xf60), f_q))
{
            let result := mulmod(mload(0x1240), mload(0x20), f_q)
mstore(4704, result)
        }
mstore(0x1280, mulmod(mload(0x5a0), mload(0x580), f_q))
mstore(0x12a0, addmod(mload(0x560), mload(0x1280), f_q))
mstore(0x12c0, addmod(mload(0x12a0), sub(f_q, mload(0x5c0)), f_q))
mstore(0x12e0, mulmod(mload(0x12c0), mload(0x6c0), f_q))
mstore(0x1300, mulmod(mload(0x400), mload(0x12e0), f_q))
mstore(0x1320, mulmod(mload(0x620), mload(0x600), f_q))
mstore(0x1340, addmod(mload(0x5e0), mload(0x1320), f_q))
mstore(0x1360, addmod(mload(0x1340), sub(f_q, mload(0x640)), f_q))
mstore(0x1380, mulmod(mload(0x1360), mload(0x6e0), f_q))
mstore(0x13a0, addmod(mload(0x1300), mload(0x1380), f_q))
mstore(0x13c0, mulmod(mload(0x400), mload(0x13a0), f_q))
mstore(0x13e0, addmod(1, sub(f_q, mload(0x7c0)), f_q))
mstore(0x1400, mulmod(mload(0x13e0), mload(0x1240), f_q))
mstore(0x1420, addmod(mload(0x13c0), mload(0x1400), f_q))
mstore(0x1440, mulmod(mload(0x400), mload(0x1420), f_q))
mstore(0x1460, mulmod(mload(0x880), mload(0x880), f_q))
mstore(0x1480, addmod(mload(0x1460), sub(f_q, mload(0x880)), f_q))
mstore(0x14a0, mulmod(mload(0x1480), mload(0x1160), f_q))
mstore(0x14c0, addmod(mload(0x1440), mload(0x14a0), f_q))
mstore(0x14e0, mulmod(mload(0x400), mload(0x14c0), f_q))
mstore(0x1500, addmod(mload(0x820), sub(f_q, mload(0x800)), f_q))
mstore(0x1520, mulmod(mload(0x1500), mload(0x1240), f_q))
mstore(0x1540, addmod(mload(0x14e0), mload(0x1520), f_q))
mstore(0x1560, mulmod(mload(0x400), mload(0x1540), f_q))
mstore(0x1580, addmod(mload(0x880), sub(f_q, mload(0x860)), f_q))
mstore(0x15a0, mulmod(mload(0x1580), mload(0x1240), f_q))
mstore(0x15c0, addmod(mload(0x1560), mload(0x15a0), f_q))
mstore(0x15e0, mulmod(mload(0x400), mload(0x15c0), f_q))
mstore(0x1600, addmod(1, sub(f_q, mload(0x1160)), f_q))
mstore(0x1620, addmod(mload(0x1180), mload(0x11a0), f_q))
mstore(0x1640, addmod(mload(0x1620), mload(0x11c0), f_q))
mstore(0x1660, addmod(mload(0x1640), mload(0x11e0), f_q))
mstore(0x1680, addmod(mload(0x1660), mload(0x1200), f_q))
mstore(0x16a0, addmod(mload(0x1680), mload(0x1220), f_q))
mstore(0x16c0, addmod(mload(0x1600), sub(f_q, mload(0x16a0)), f_q))
mstore(0x16e0, mulmod(mload(0x720), mload(0x200), f_q))
mstore(0x1700, addmod(mload(0x680), mload(0x16e0), f_q))
mstore(0x1720, addmod(mload(0x1700), mload(0x260), f_q))
mstore(0x1740, mulmod(mload(0x740), mload(0x200), f_q))
mstore(0x1760, addmod(mload(0x560), mload(0x1740), f_q))
mstore(0x1780, addmod(mload(0x1760), mload(0x260), f_q))
mstore(0x17a0, mulmod(mload(0x1780), mload(0x1720), f_q))
mstore(0x17c0, mulmod(mload(0x17a0), mload(0x7e0), f_q))
mstore(0x17e0, mulmod(1, mload(0x200), f_q))
mstore(0x1800, mulmod(mload(0x520), mload(0x17e0), f_q))
mstore(0x1820, addmod(mload(0x680), mload(0x1800), f_q))
mstore(0x1840, addmod(mload(0x1820), mload(0x260), f_q))
mstore(0x1860, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x200), f_q))
mstore(0x1880, mulmod(mload(0x520), mload(0x1860), f_q))
mstore(0x18a0, addmod(mload(0x560), mload(0x1880), f_q))
mstore(0x18c0, addmod(mload(0x18a0), mload(0x260), f_q))
mstore(0x18e0, mulmod(mload(0x18c0), mload(0x1840), f_q))
mstore(0x1900, mulmod(mload(0x18e0), mload(0x7c0), f_q))
mstore(0x1920, addmod(mload(0x17c0), sub(f_q, mload(0x1900)), f_q))
mstore(0x1940, mulmod(mload(0x1920), mload(0x16c0), f_q))
mstore(0x1960, addmod(mload(0x15e0), mload(0x1940), f_q))
mstore(0x1980, mulmod(mload(0x400), mload(0x1960), f_q))
mstore(0x19a0, mulmod(mload(0x760), mload(0x200), f_q))
mstore(0x19c0, addmod(mload(0x5e0), mload(0x19a0), f_q))
mstore(0x19e0, addmod(mload(0x19c0), mload(0x260), f_q))
mstore(0x1a00, mulmod(mload(0x780), mload(0x200), f_q))
mstore(0x1a20, addmod(mload(0x660), mload(0x1a00), f_q))
mstore(0x1a40, addmod(mload(0x1a20), mload(0x260), f_q))
mstore(0x1a60, mulmod(mload(0x1a40), mload(0x19e0), f_q))
mstore(0x1a80, mulmod(mload(0x1a60), mload(0x840), f_q))
mstore(0x1aa0, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x200), f_q))
mstore(0x1ac0, mulmod(mload(0x520), mload(0x1aa0), f_q))
mstore(0x1ae0, addmod(mload(0x5e0), mload(0x1ac0), f_q))
mstore(0x1b00, addmod(mload(0x1ae0), mload(0x260), f_q))
mstore(0x1b20, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x200), f_q))
mstore(0x1b40, mulmod(mload(0x520), mload(0x1b20), f_q))
mstore(0x1b60, addmod(mload(0x660), mload(0x1b40), f_q))
mstore(0x1b80, addmod(mload(0x1b60), mload(0x260), f_q))
mstore(0x1ba0, mulmod(mload(0x1b80), mload(0x1b00), f_q))
mstore(0x1bc0, mulmod(mload(0x1ba0), mload(0x820), f_q))
mstore(0x1be0, addmod(mload(0x1a80), sub(f_q, mload(0x1bc0)), f_q))
mstore(0x1c00, mulmod(mload(0x1be0), mload(0x16c0), f_q))
mstore(0x1c20, addmod(mload(0x1980), mload(0x1c00), f_q))
mstore(0x1c40, mulmod(mload(0x400), mload(0x1c20), f_q))
mstore(0x1c60, mulmod(mload(0x7a0), mload(0x200), f_q))
mstore(0x1c80, addmod(mload(0x1260), mload(0x1c60), f_q))
mstore(0x1ca0, addmod(mload(0x1c80), mload(0x260), f_q))
mstore(0x1cc0, mulmod(mload(0x1ca0), mload(0x8a0), f_q))
mstore(0x1ce0, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x200), f_q))
mstore(0x1d00, mulmod(mload(0x520), mload(0x1ce0), f_q))
mstore(0x1d20, addmod(mload(0x1260), mload(0x1d00), f_q))
mstore(0x1d40, addmod(mload(0x1d20), mload(0x260), f_q))
mstore(0x1d60, mulmod(mload(0x1d40), mload(0x880), f_q))
mstore(0x1d80, addmod(mload(0x1cc0), sub(f_q, mload(0x1d60)), f_q))
mstore(0x1da0, mulmod(mload(0x1d80), mload(0x16c0), f_q))
mstore(0x1dc0, addmod(mload(0x1c40), mload(0x1da0), f_q))
mstore(0x1de0, mulmod(mload(0x400), mload(0x1dc0), f_q))
mstore(0x1e00, addmod(1, sub(f_q, mload(0x8c0)), f_q))
mstore(0x1e20, mulmod(mload(0x1e00), mload(0x1240), f_q))
mstore(0x1e40, addmod(mload(0x1de0), mload(0x1e20), f_q))
mstore(0x1e60, mulmod(mload(0x400), mload(0x1e40), f_q))
mstore(0x1e80, mulmod(mload(0x8c0), mload(0x8c0), f_q))
mstore(0x1ea0, addmod(mload(0x1e80), sub(f_q, mload(0x8c0)), f_q))
mstore(0x1ec0, mulmod(mload(0x1ea0), mload(0x1160), f_q))
mstore(0x1ee0, addmod(mload(0x1e60), mload(0x1ec0), f_q))
mstore(0x1f00, mulmod(mload(0x400), mload(0x1ee0), f_q))
mstore(0x1f20, addmod(mload(0x900), mload(0x200), f_q))
mstore(0x1f40, mulmod(mload(0x1f20), mload(0x8e0), f_q))
mstore(0x1f60, addmod(mload(0x940), mload(0x260), f_q))
mstore(0x1f80, mulmod(mload(0x1f60), mload(0x1f40), f_q))
mstore(0x1fa0, addmod(mload(0x660), mload(0x200), f_q))
mstore(0x1fc0, mulmod(mload(0x1fa0), mload(0x8c0), f_q))
mstore(0x1fe0, addmod(mload(0x6a0), mload(0x260), f_q))
mstore(0x2000, mulmod(mload(0x1fe0), mload(0x1fc0), f_q))
mstore(0x2020, addmod(mload(0x1f80), sub(f_q, mload(0x2000)), f_q))
mstore(0x2040, mulmod(mload(0x2020), mload(0x16c0), f_q))
mstore(0x2060, addmod(mload(0x1f00), mload(0x2040), f_q))
mstore(0x2080, mulmod(mload(0x400), mload(0x2060), f_q))
mstore(0x20a0, addmod(mload(0x900), sub(f_q, mload(0x940)), f_q))
mstore(0x20c0, mulmod(mload(0x20a0), mload(0x1240), f_q))
mstore(0x20e0, addmod(mload(0x2080), mload(0x20c0), f_q))
mstore(0x2100, mulmod(mload(0x400), mload(0x20e0), f_q))
mstore(0x2120, mulmod(mload(0x20a0), mload(0x16c0), f_q))
mstore(0x2140, addmod(mload(0x900), sub(f_q, mload(0x920)), f_q))
mstore(0x2160, mulmod(mload(0x2140), mload(0x2120), f_q))
mstore(0x2180, addmod(mload(0x2100), mload(0x2160), f_q))
mstore(0x21a0, mulmod(mload(0xd20), mload(0xd20), f_q))
mstore(0x21c0, mulmod(mload(0x21a0), mload(0xd20), f_q))
mstore(0x21e0, mulmod(1, mload(0xd20), f_q))
mstore(0x2200, mulmod(1, mload(0x21a0), f_q))
mstore(0x2220, mulmod(mload(0x2180), mload(0xd40), f_q))
mstore(0x2240, mulmod(mload(0xb00), mload(0x520), f_q))
mstore(0x2260, mulmod(mload(0x2240), mload(0x520), f_q))
mstore(0x2280, mulmod(mload(0x520), 7310587191487482613389628690976703164033126240759264491908912333706168173225, f_q))
mstore(0x22a0, addmod(mload(0xa80), sub(f_q, mload(0x2280)), f_q))
mstore(0x22c0, mulmod(mload(0x520), 6363119021782681274480715230122258277189830284152385293217720612674619714422, f_q))
mstore(0x22e0, addmod(mload(0xa80), sub(f_q, mload(0x22c0)), f_q))
mstore(0x2300, mulmod(mload(0x520), 1, f_q))
mstore(0x2320, addmod(mload(0xa80), sub(f_q, mload(0x2300)), f_q))
mstore(0x2340, mulmod(mload(0x520), 6955697244493336113861667751840378876927906302623587437721024018233754910398, f_q))
mstore(0x2360, addmod(mload(0xa80), sub(f_q, mload(0x2340)), f_q))
mstore(0x2380, mulmod(mload(0x520), 21846745818185811051373434299876022191132089169516983080959277716660228899818, f_q))
mstore(0x23a0, addmod(mload(0xa80), sub(f_q, mload(0x2380)), f_q))
mstore(0x23c0, mulmod(mload(0x520), 13526759757306252939732186602630155490343117803221487512984160143178057306805, f_q))
mstore(0x23e0, addmod(mload(0xa80), sub(f_q, mload(0x23c0)), f_q))
mstore(0x2400, mulmod(2940864004678975696316873683451526288601574908606966186364026277868707679642, mload(0x2240), f_q))
mstore(0x2420, mulmod(mload(0x2400), 1, f_q))
{
            let result := mulmod(mload(0xa80), mload(0x2400), f_q)
result := addmod(mulmod(mload(0x520), sub(f_q, mload(0x2420)), f_q), result, f_q)
mstore(9280, result)
        }
mstore(0x2460, mulmod(3780184929546207794165793425726688506491165310656918727921268383959469598456, mload(0x2240), f_q))
mstore(0x2480, mulmod(mload(0x2460), 6955697244493336113861667751840378876927906302623587437721024018233754910398, f_q))
{
            let result := mulmod(mload(0xa80), mload(0x2460), f_q)
result := addmod(mulmod(mload(0x520), sub(f_q, mload(0x2480)), f_q), result, f_q)
mstore(9376, result)
        }
mstore(0x24c0, mulmod(15988440449117113657962678264155427359263359440478972105692146429637038953160, mload(0x2240), f_q))
mstore(0x24e0, mulmod(mload(0x24c0), 21846745818185811051373434299876022191132089169516983080959277716660228899818, f_q))
{
            let result := mulmod(mload(0xa80), mload(0x24c0), f_q)
result := addmod(mulmod(mload(0x520), sub(f_q, mload(0x24e0)), f_q), result, f_q)
mstore(9472, result)
        }
mstore(0x2520, mulmod(18220982760928406788147627975587442470177662144847785908405976500286566091551, mload(0x2240), f_q))
mstore(0x2540, mulmod(mload(0x2520), 13526759757306252939732186602630155490343117803221487512984160143178057306805, f_q))
{
            let result := mulmod(mload(0xa80), mload(0x2520), f_q)
result := addmod(mulmod(mload(0x520), sub(f_q, mload(0x2540)), f_q), result, f_q)
mstore(9568, result)
        }
mstore(0x2580, mulmod(1, mload(0x2320), f_q))
mstore(0x25a0, mulmod(mload(0x2580), mload(0x2360), f_q))
mstore(0x25c0, mulmod(mload(0x25a0), mload(0x23a0), f_q))
mstore(0x25e0, mulmod(mload(0x25c0), mload(0x23e0), f_q))
{
            let result := mulmod(mload(0xa80), 1, f_q)
result := addmod(mulmod(mload(0x520), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q), result, f_q)
mstore(9728, result)
        }
mstore(0x2620, mulmod(17420472825769857063971405726000913766558667202650166946253978953375224626184, mload(0xb00), f_q))
mstore(0x2640, mulmod(mload(0x2620), 1, f_q))
{
            let result := mulmod(mload(0xa80), mload(0x2620), f_q)
result := addmod(mulmod(mload(0x520), sub(f_q, mload(0x2640)), f_q), result, f_q)
mstore(9824, result)
        }
mstore(0x2680, mulmod(12403121375268556981925098815451625759265973762035675602961454913393302948456, mload(0xb00), f_q))
mstore(0x26a0, mulmod(mload(0x2680), 6955697244493336113861667751840378876927906302623587437721024018233754910398, f_q))
{
            let result := mulmod(mload(0xa80), mload(0x2680), f_q)
result := addmod(mulmod(mload(0x520), sub(f_q, mload(0x26a0)), f_q), result, f_q)
mstore(9920, result)
        }
mstore(0x26e0, mulmod(11026988883822566352833937753519824719181511317208835361160053691376277278989, mload(0xb00), f_q))
mstore(0x2700, mulmod(mload(0x26e0), 7310587191487482613389628690976703164033126240759264491908912333706168173225, f_q))
{
            let result := mulmod(mload(0xa80), mload(0x26e0), f_q)
result := addmod(mulmod(mload(0x520), sub(f_q, mload(0x2700)), f_q), result, f_q)
mstore(10016, result)
        }
mstore(0x2740, mulmod(mload(0x25a0), mload(0x22a0), f_q))
mstore(0x2760, mulmod(14932545627345939108384737993416896211620458097792446905977180168342053585220, mload(0x520), f_q))
mstore(0x2780, mulmod(mload(0x2760), 1, f_q))
{
            let result := mulmod(mload(0xa80), mload(0x2760), f_q)
result := addmod(mulmod(mload(0x520), sub(f_q, mload(0x2780)), f_q), result, f_q)
mstore(10144, result)
        }
mstore(0x27c0, mulmod(6955697244493336113861667751840378876927906302623587437721024018233754910397, mload(0x520), f_q))
mstore(0x27e0, mulmod(mload(0x27c0), 6955697244493336113861667751840378876927906302623587437721024018233754910398, f_q))
{
            let result := mulmod(mload(0xa80), mload(0x27c0), f_q)
result := addmod(mulmod(mload(0x520), sub(f_q, mload(0x27e0)), f_q), result, f_q)
mstore(10240, result)
        }
mstore(0x2820, mulmod(15525123850056593947765690515135016811358534116263649050480483573901188781196, mload(0x520), f_q))
mstore(0x2840, mulmod(mload(0x2820), 1, f_q))
{
            let result := mulmod(mload(0xa80), mload(0x2820), f_q)
result := addmod(mulmod(mload(0x520), sub(f_q, mload(0x2840)), f_q), result, f_q)
mstore(10336, result)
        }
mstore(0x2880, mulmod(6363119021782681274480715230122258277189830284152385293217720612674619714421, mload(0x520), f_q))
mstore(0x28a0, mulmod(mload(0x2880), 6363119021782681274480715230122258277189830284152385293217720612674619714422, f_q))
{
            let result := mulmod(mload(0xa80), mload(0x2880), f_q)
result := addmod(mulmod(mload(0x520), sub(f_q, mload(0x28a0)), f_q), result, f_q)
mstore(10432, result)
        }
mstore(0x28e0, mulmod(mload(0x2580), mload(0x22e0), f_q))
{
            let prod := mload(0x2440)

                prod := mulmod(mload(0x24a0), prod, f_q)
                mstore(0x2900, prod)
            
                prod := mulmod(mload(0x2500), prod, f_q)
                mstore(0x2920, prod)
            
                prod := mulmod(mload(0x2560), prod, f_q)
                mstore(0x2940, prod)
            
                prod := mulmod(mload(0x2600), prod, f_q)
                mstore(0x2960, prod)
            
                prod := mulmod(mload(0x2580), prod, f_q)
                mstore(0x2980, prod)
            
                prod := mulmod(mload(0x2660), prod, f_q)
                mstore(0x29a0, prod)
            
                prod := mulmod(mload(0x26c0), prod, f_q)
                mstore(0x29c0, prod)
            
                prod := mulmod(mload(0x2720), prod, f_q)
                mstore(0x29e0, prod)
            
                prod := mulmod(mload(0x2740), prod, f_q)
                mstore(0x2a00, prod)
            
                prod := mulmod(mload(0x27a0), prod, f_q)
                mstore(0x2a20, prod)
            
                prod := mulmod(mload(0x2800), prod, f_q)
                mstore(0x2a40, prod)
            
                prod := mulmod(mload(0x25a0), prod, f_q)
                mstore(0x2a60, prod)
            
                prod := mulmod(mload(0x2860), prod, f_q)
                mstore(0x2a80, prod)
            
                prod := mulmod(mload(0x28c0), prod, f_q)
                mstore(0x2aa0, prod)
            
                prod := mulmod(mload(0x28e0), prod, f_q)
                mstore(0x2ac0, prod)
            
        }
mstore(0x2b00, 32)
mstore(0x2b20, 32)
mstore(0x2b40, 32)
mstore(0x2b60, mload(0x2ac0))
mstore(0x2b80, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x2ba0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x2b00, 0xc0, 0x2ae0, 0x20), 1), success)
{
            
            let inv := mload(0x2ae0)
            let v
        
                    v := mload(0x28e0)
                    mstore(10464, mulmod(mload(0x2aa0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x28c0)
                    mstore(10432, mulmod(mload(0x2a80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2860)
                    mstore(10336, mulmod(mload(0x2a60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x25a0)
                    mstore(9632, mulmod(mload(0x2a40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2800)
                    mstore(10240, mulmod(mload(0x2a20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x27a0)
                    mstore(10144, mulmod(mload(0x2a00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2740)
                    mstore(10048, mulmod(mload(0x29e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2720)
                    mstore(10016, mulmod(mload(0x29c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x26c0)
                    mstore(9920, mulmod(mload(0x29a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2660)
                    mstore(9824, mulmod(mload(0x2980), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2580)
                    mstore(9600, mulmod(mload(0x2960), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2600)
                    mstore(9728, mulmod(mload(0x2940), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2560)
                    mstore(9568, mulmod(mload(0x2920), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2500)
                    mstore(9472, mulmod(mload(0x2900), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x24a0)
                    mstore(9376, mulmod(mload(0x2440), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x2440, inv)

        }
{
            let result := mload(0x2440)
result := addmod(mload(0x24a0), result, f_q)
result := addmod(mload(0x2500), result, f_q)
result := addmod(mload(0x2560), result, f_q)
mstore(11200, result)
        }
mstore(0x2be0, mulmod(mload(0x25e0), mload(0x2580), f_q))
{
            let result := mload(0x2600)
mstore(11264, result)
        }
mstore(0x2c20, mulmod(mload(0x25e0), mload(0x2740), f_q))
{
            let result := mload(0x2660)
result := addmod(mload(0x26c0), result, f_q)
result := addmod(mload(0x2720), result, f_q)
mstore(11328, result)
        }
mstore(0x2c60, mulmod(mload(0x25e0), mload(0x25a0), f_q))
{
            let result := mload(0x27a0)
result := addmod(mload(0x2800), result, f_q)
mstore(11392, result)
        }
mstore(0x2ca0, mulmod(mload(0x25e0), mload(0x28e0), f_q))
{
            let result := mload(0x2860)
result := addmod(mload(0x28c0), result, f_q)
mstore(11456, result)
        }
{
            let prod := mload(0x2bc0)

                prod := mulmod(mload(0x2c00), prod, f_q)
                mstore(0x2ce0, prod)
            
                prod := mulmod(mload(0x2c40), prod, f_q)
                mstore(0x2d00, prod)
            
                prod := mulmod(mload(0x2c80), prod, f_q)
                mstore(0x2d20, prod)
            
                prod := mulmod(mload(0x2cc0), prod, f_q)
                mstore(0x2d40, prod)
            
        }
mstore(0x2d80, 32)
mstore(0x2da0, 32)
mstore(0x2dc0, 32)
mstore(0x2de0, mload(0x2d40))
mstore(0x2e00, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x2e20, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x2d80, 0xc0, 0x2d60, 0x20), 1), success)
{
            
            let inv := mload(0x2d60)
            let v
        
                    v := mload(0x2cc0)
                    mstore(11456, mulmod(mload(0x2d20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2c80)
                    mstore(11392, mulmod(mload(0x2d00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2c40)
                    mstore(11328, mulmod(mload(0x2ce0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2c00)
                    mstore(11264, mulmod(mload(0x2bc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x2bc0, inv)

        }
mstore(0x2e40, mulmod(mload(0x2be0), mload(0x2c00), f_q))
mstore(0x2e60, mulmod(mload(0x2c20), mload(0x2c40), f_q))
mstore(0x2e80, mulmod(mload(0x2c60), mload(0x2c80), f_q))
mstore(0x2ea0, mulmod(mload(0x2ca0), mload(0x2cc0), f_q))
mstore(0x2ec0, mulmod(mload(0x980), mload(0x980), f_q))
mstore(0x2ee0, mulmod(mload(0x2ec0), mload(0x980), f_q))
mstore(0x2f00, mulmod(mload(0x2ee0), mload(0x980), f_q))
mstore(0x2f20, mulmod(mload(0x2f00), mload(0x980), f_q))
mstore(0x2f40, mulmod(mload(0x2f20), mload(0x980), f_q))
mstore(0x2f60, mulmod(mload(0x2f40), mload(0x980), f_q))
mstore(0x2f80, mulmod(mload(0x2f60), mload(0x980), f_q))
mstore(0x2fa0, mulmod(mload(0x2f80), mload(0x980), f_q))
mstore(0x2fc0, mulmod(mload(0x2fa0), mload(0x980), f_q))
mstore(0x2fe0, mulmod(mload(0x2fc0), mload(0x980), f_q))
mstore(0x3000, mulmod(mload(0x2fe0), mload(0x980), f_q))
mstore(0x3020, mulmod(mload(0x3000), mload(0x980), f_q))
mstore(0x3040, mulmod(mload(0x9e0), mload(0x9e0), f_q))
mstore(0x3060, mulmod(mload(0x3040), mload(0x9e0), f_q))
mstore(0x3080, mulmod(mload(0x3060), mload(0x9e0), f_q))
mstore(0x30a0, mulmod(mload(0x3080), mload(0x9e0), f_q))
{
            let result := mulmod(mload(0x560), mload(0x2440), f_q)
result := addmod(mulmod(mload(0x580), mload(0x24a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x5a0), mload(0x2500), f_q), result, f_q)
result := addmod(mulmod(mload(0x5c0), mload(0x2560), f_q), result, f_q)
mstore(12480, result)
        }
mstore(0x30e0, mulmod(mload(0x30c0), mload(0x2bc0), f_q))
mstore(0x3100, mulmod(sub(f_q, mload(0x30e0)), 1, f_q))
{
            let result := mulmod(mload(0x5e0), mload(0x2440), f_q)
result := addmod(mulmod(mload(0x600), mload(0x24a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x620), mload(0x2500), f_q), result, f_q)
result := addmod(mulmod(mload(0x640), mload(0x2560), f_q), result, f_q)
mstore(12576, result)
        }
mstore(0x3140, mulmod(mload(0x3120), mload(0x2bc0), f_q))
mstore(0x3160, mulmod(sub(f_q, mload(0x3140)), mload(0x980), f_q))
mstore(0x3180, mulmod(1, mload(0x980), f_q))
mstore(0x31a0, addmod(mload(0x3100), mload(0x3160), f_q))
mstore(0x31c0, mulmod(mload(0x31a0), 1, f_q))
mstore(0x31e0, mulmod(mload(0x3180), 1, f_q))
mstore(0x3200, mulmod(1, mload(0x2be0), f_q))
{
            let result := mulmod(mload(0x660), mload(0x2600), f_q)
mstore(12832, result)
        }
mstore(0x3240, mulmod(mload(0x3220), mload(0x2e40), f_q))
mstore(0x3260, mulmod(sub(f_q, mload(0x3240)), 1, f_q))
mstore(0x3280, mulmod(mload(0x3200), 1, f_q))
{
            let result := mulmod(mload(0x940), mload(0x2600), f_q)
mstore(12960, result)
        }
mstore(0x32c0, mulmod(mload(0x32a0), mload(0x2e40), f_q))
mstore(0x32e0, mulmod(sub(f_q, mload(0x32c0)), mload(0x980), f_q))
mstore(0x3300, mulmod(mload(0x3200), mload(0x980), f_q))
mstore(0x3320, addmod(mload(0x3260), mload(0x32e0), f_q))
{
            let result := mulmod(mload(0x680), mload(0x2600), f_q)
mstore(13120, result)
        }
mstore(0x3360, mulmod(mload(0x3340), mload(0x2e40), f_q))
mstore(0x3380, mulmod(sub(f_q, mload(0x3360)), mload(0x2ec0), f_q))
mstore(0x33a0, mulmod(mload(0x3200), mload(0x2ec0), f_q))
mstore(0x33c0, addmod(mload(0x3320), mload(0x3380), f_q))
{
            let result := mulmod(mload(0x6a0), mload(0x2600), f_q)
mstore(13280, result)
        }
mstore(0x3400, mulmod(mload(0x33e0), mload(0x2e40), f_q))
mstore(0x3420, mulmod(sub(f_q, mload(0x3400)), mload(0x2ee0), f_q))
mstore(0x3440, mulmod(mload(0x3200), mload(0x2ee0), f_q))
mstore(0x3460, addmod(mload(0x33c0), mload(0x3420), f_q))
{
            let result := mulmod(mload(0x6c0), mload(0x2600), f_q)
mstore(13440, result)
        }
mstore(0x34a0, mulmod(mload(0x3480), mload(0x2e40), f_q))
mstore(0x34c0, mulmod(sub(f_q, mload(0x34a0)), mload(0x2f00), f_q))
mstore(0x34e0, mulmod(mload(0x3200), mload(0x2f00), f_q))
mstore(0x3500, addmod(mload(0x3460), mload(0x34c0), f_q))
{
            let result := mulmod(mload(0x6e0), mload(0x2600), f_q)
mstore(13600, result)
        }
mstore(0x3540, mulmod(mload(0x3520), mload(0x2e40), f_q))
mstore(0x3560, mulmod(sub(f_q, mload(0x3540)), mload(0x2f20), f_q))
mstore(0x3580, mulmod(mload(0x3200), mload(0x2f20), f_q))
mstore(0x35a0, addmod(mload(0x3500), mload(0x3560), f_q))
{
            let result := mulmod(mload(0x720), mload(0x2600), f_q)
mstore(13760, result)
        }
mstore(0x35e0, mulmod(mload(0x35c0), mload(0x2e40), f_q))
mstore(0x3600, mulmod(sub(f_q, mload(0x35e0)), mload(0x2f40), f_q))
mstore(0x3620, mulmod(mload(0x3200), mload(0x2f40), f_q))
mstore(0x3640, addmod(mload(0x35a0), mload(0x3600), f_q))
{
            let result := mulmod(mload(0x740), mload(0x2600), f_q)
mstore(13920, result)
        }
mstore(0x3680, mulmod(mload(0x3660), mload(0x2e40), f_q))
mstore(0x36a0, mulmod(sub(f_q, mload(0x3680)), mload(0x2f60), f_q))
mstore(0x36c0, mulmod(mload(0x3200), mload(0x2f60), f_q))
mstore(0x36e0, addmod(mload(0x3640), mload(0x36a0), f_q))
{
            let result := mulmod(mload(0x760), mload(0x2600), f_q)
mstore(14080, result)
        }
mstore(0x3720, mulmod(mload(0x3700), mload(0x2e40), f_q))
mstore(0x3740, mulmod(sub(f_q, mload(0x3720)), mload(0x2f80), f_q))
mstore(0x3760, mulmod(mload(0x3200), mload(0x2f80), f_q))
mstore(0x3780, addmod(mload(0x36e0), mload(0x3740), f_q))
{
            let result := mulmod(mload(0x780), mload(0x2600), f_q)
mstore(14240, result)
        }
mstore(0x37c0, mulmod(mload(0x37a0), mload(0x2e40), f_q))
mstore(0x37e0, mulmod(sub(f_q, mload(0x37c0)), mload(0x2fa0), f_q))
mstore(0x3800, mulmod(mload(0x3200), mload(0x2fa0), f_q))
mstore(0x3820, addmod(mload(0x3780), mload(0x37e0), f_q))
{
            let result := mulmod(mload(0x7a0), mload(0x2600), f_q)
mstore(14400, result)
        }
mstore(0x3860, mulmod(mload(0x3840), mload(0x2e40), f_q))
mstore(0x3880, mulmod(sub(f_q, mload(0x3860)), mload(0x2fc0), f_q))
mstore(0x38a0, mulmod(mload(0x3200), mload(0x2fc0), f_q))
mstore(0x38c0, addmod(mload(0x3820), mload(0x3880), f_q))
mstore(0x38e0, mulmod(mload(0x21e0), mload(0x2be0), f_q))
mstore(0x3900, mulmod(mload(0x2200), mload(0x2be0), f_q))
{
            let result := mulmod(mload(0x2220), mload(0x2600), f_q)
mstore(14624, result)
        }
mstore(0x3940, mulmod(mload(0x3920), mload(0x2e40), f_q))
mstore(0x3960, mulmod(sub(f_q, mload(0x3940)), mload(0x2fe0), f_q))
mstore(0x3980, mulmod(mload(0x3200), mload(0x2fe0), f_q))
mstore(0x39a0, mulmod(mload(0x38e0), mload(0x2fe0), f_q))
mstore(0x39c0, mulmod(mload(0x3900), mload(0x2fe0), f_q))
mstore(0x39e0, addmod(mload(0x38c0), mload(0x3960), f_q))
{
            let result := mulmod(mload(0x700), mload(0x2600), f_q)
mstore(14848, result)
        }
mstore(0x3a20, mulmod(mload(0x3a00), mload(0x2e40), f_q))
mstore(0x3a40, mulmod(sub(f_q, mload(0x3a20)), mload(0x3000), f_q))
mstore(0x3a60, mulmod(mload(0x3200), mload(0x3000), f_q))
mstore(0x3a80, addmod(mload(0x39e0), mload(0x3a40), f_q))
mstore(0x3aa0, mulmod(mload(0x3a80), mload(0x9e0), f_q))
mstore(0x3ac0, mulmod(mload(0x3280), mload(0x9e0), f_q))
mstore(0x3ae0, mulmod(mload(0x3300), mload(0x9e0), f_q))
mstore(0x3b00, mulmod(mload(0x33a0), mload(0x9e0), f_q))
mstore(0x3b20, mulmod(mload(0x3440), mload(0x9e0), f_q))
mstore(0x3b40, mulmod(mload(0x34e0), mload(0x9e0), f_q))
mstore(0x3b60, mulmod(mload(0x3580), mload(0x9e0), f_q))
mstore(0x3b80, mulmod(mload(0x3620), mload(0x9e0), f_q))
mstore(0x3ba0, mulmod(mload(0x36c0), mload(0x9e0), f_q))
mstore(0x3bc0, mulmod(mload(0x3760), mload(0x9e0), f_q))
mstore(0x3be0, mulmod(mload(0x3800), mload(0x9e0), f_q))
mstore(0x3c00, mulmod(mload(0x38a0), mload(0x9e0), f_q))
mstore(0x3c20, mulmod(mload(0x3980), mload(0x9e0), f_q))
mstore(0x3c40, mulmod(mload(0x39a0), mload(0x9e0), f_q))
mstore(0x3c60, mulmod(mload(0x39c0), mload(0x9e0), f_q))
mstore(0x3c80, mulmod(mload(0x3a60), mload(0x9e0), f_q))
mstore(0x3ca0, addmod(mload(0x31c0), mload(0x3aa0), f_q))
mstore(0x3cc0, mulmod(1, mload(0x2c20), f_q))
{
            let result := mulmod(mload(0x7c0), mload(0x2660), f_q)
result := addmod(mulmod(mload(0x7e0), mload(0x26c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x800), mload(0x2720), f_q), result, f_q)
mstore(15584, result)
        }
mstore(0x3d00, mulmod(mload(0x3ce0), mload(0x2e60), f_q))
mstore(0x3d20, mulmod(sub(f_q, mload(0x3d00)), 1, f_q))
mstore(0x3d40, mulmod(mload(0x3cc0), 1, f_q))
{
            let result := mulmod(mload(0x820), mload(0x2660), f_q)
result := addmod(mulmod(mload(0x840), mload(0x26c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x860), mload(0x2720), f_q), result, f_q)
mstore(15712, result)
        }
mstore(0x3d80, mulmod(mload(0x3d60), mload(0x2e60), f_q))
mstore(0x3da0, mulmod(sub(f_q, mload(0x3d80)), mload(0x980), f_q))
mstore(0x3dc0, mulmod(mload(0x3cc0), mload(0x980), f_q))
mstore(0x3de0, addmod(mload(0x3d20), mload(0x3da0), f_q))
mstore(0x3e00, mulmod(mload(0x3de0), mload(0x3040), f_q))
mstore(0x3e20, mulmod(mload(0x3d40), mload(0x3040), f_q))
mstore(0x3e40, mulmod(mload(0x3dc0), mload(0x3040), f_q))
mstore(0x3e60, addmod(mload(0x3ca0), mload(0x3e00), f_q))
mstore(0x3e80, mulmod(1, mload(0x2c60), f_q))
{
            let result := mulmod(mload(0x880), mload(0x27a0), f_q)
result := addmod(mulmod(mload(0x8a0), mload(0x2800), f_q), result, f_q)
mstore(16032, result)
        }
mstore(0x3ec0, mulmod(mload(0x3ea0), mload(0x2e80), f_q))
mstore(0x3ee0, mulmod(sub(f_q, mload(0x3ec0)), 1, f_q))
mstore(0x3f00, mulmod(mload(0x3e80), 1, f_q))
{
            let result := mulmod(mload(0x8c0), mload(0x27a0), f_q)
result := addmod(mulmod(mload(0x8e0), mload(0x2800), f_q), result, f_q)
mstore(16160, result)
        }
mstore(0x3f40, mulmod(mload(0x3f20), mload(0x2e80), f_q))
mstore(0x3f60, mulmod(sub(f_q, mload(0x3f40)), mload(0x980), f_q))
mstore(0x3f80, mulmod(mload(0x3e80), mload(0x980), f_q))
mstore(0x3fa0, addmod(mload(0x3ee0), mload(0x3f60), f_q))
mstore(0x3fc0, mulmod(mload(0x3fa0), mload(0x3060), f_q))
mstore(0x3fe0, mulmod(mload(0x3f00), mload(0x3060), f_q))
mstore(0x4000, mulmod(mload(0x3f80), mload(0x3060), f_q))
mstore(0x4020, addmod(mload(0x3e60), mload(0x3fc0), f_q))
mstore(0x4040, mulmod(1, mload(0x2ca0), f_q))
{
            let result := mulmod(mload(0x900), mload(0x2860), f_q)
result := addmod(mulmod(mload(0x920), mload(0x28c0), f_q), result, f_q)
mstore(16480, result)
        }
mstore(0x4080, mulmod(mload(0x4060), mload(0x2ea0), f_q))
mstore(0x40a0, mulmod(sub(f_q, mload(0x4080)), 1, f_q))
mstore(0x40c0, mulmod(mload(0x4040), 1, f_q))
mstore(0x40e0, mulmod(mload(0x40a0), mload(0x3080), f_q))
mstore(0x4100, mulmod(mload(0x40c0), mload(0x3080), f_q))
mstore(0x4120, addmod(mload(0x4020), mload(0x40e0), f_q))
mstore(0x4140, mulmod(1, mload(0x25e0), f_q))
mstore(0x4160, mulmod(1, mload(0xa80), f_q))
mstore(0x4180, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x41a0, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x41c0, mload(0x4120))
success := and(eq(staticcall(gas(), 0x7, 0x4180, 0x60, 0x4180, 0x40), 1), success)
mstore(0x41e0, mload(0x4180))
                    mstore(0x4200, mload(0x41a0))
mstore(0x4220, mload(0x40))
                    mstore(0x4240, mload(0x60))
success := and(eq(staticcall(gas(), 0x6, 0x41e0, 0x80, 0x41e0, 0x40), 1), success)
mstore(0x4260, mload(0x80))
                    mstore(0x4280, mload(0xa0))
mstore(0x42a0, mload(0x31e0))
success := and(eq(staticcall(gas(), 0x7, 0x4260, 0x60, 0x4260, 0x40), 1), success)
mstore(0x42c0, mload(0x41e0))
                    mstore(0x42e0, mload(0x4200))
mstore(0x4300, mload(0x4260))
                    mstore(0x4320, mload(0x4280))
success := and(eq(staticcall(gas(), 0x6, 0x42c0, 0x80, 0x42c0, 0x40), 1), success)
mstore(0x4340, mload(0xc0))
                    mstore(0x4360, mload(0xe0))
mstore(0x4380, mload(0x3ac0))
success := and(eq(staticcall(gas(), 0x7, 0x4340, 0x60, 0x4340, 0x40), 1), success)
mstore(0x43a0, mload(0x42c0))
                    mstore(0x43c0, mload(0x42e0))
mstore(0x43e0, mload(0x4340))
                    mstore(0x4400, mload(0x4360))
success := and(eq(staticcall(gas(), 0x6, 0x43a0, 0x80, 0x43a0, 0x40), 1), success)
mstore(0x4420, mload(0x1a0))
                    mstore(0x4440, mload(0x1c0))
mstore(0x4460, mload(0x3ae0))
success := and(eq(staticcall(gas(), 0x7, 0x4420, 0x60, 0x4420, 0x40), 1), success)
mstore(0x4480, mload(0x43a0))
                    mstore(0x44a0, mload(0x43c0))
mstore(0x44c0, mload(0x4420))
                    mstore(0x44e0, mload(0x4440))
success := and(eq(staticcall(gas(), 0x6, 0x4480, 0x80, 0x4480, 0x40), 1), success)
mstore(0x4500, 0x2c76099e00372255ef559dd62b8b5d4de054260f281e74c9ae6c2df1c1c5f88d)
                    mstore(0x4520, 0x05aa26c09b3ad33d913bfe6f74bcdf55dc96e270e39048828c546376ddb0c071)
mstore(0x4540, mload(0x3b00))
success := and(eq(staticcall(gas(), 0x7, 0x4500, 0x60, 0x4500, 0x40), 1), success)
mstore(0x4560, mload(0x4480))
                    mstore(0x4580, mload(0x44a0))
mstore(0x45a0, mload(0x4500))
                    mstore(0x45c0, mload(0x4520))
success := and(eq(staticcall(gas(), 0x6, 0x4560, 0x80, 0x4560, 0x40), 1), success)
mstore(0x45e0, 0x08907761947828e555b1ce0ed528bc1f0d40e54fb2278b2cf4f9b65b4a4e6791)
                    mstore(0x4600, 0x1f7947f9d2f45e902d341114d979dbcb04abe4eb5fd1d0297fd845c6384bf6dd)
mstore(0x4620, mload(0x3b20))
success := and(eq(staticcall(gas(), 0x7, 0x45e0, 0x60, 0x45e0, 0x40), 1), success)
mstore(0x4640, mload(0x4560))
                    mstore(0x4660, mload(0x4580))
mstore(0x4680, mload(0x45e0))
                    mstore(0x46a0, mload(0x4600))
success := and(eq(staticcall(gas(), 0x6, 0x4640, 0x80, 0x4640, 0x40), 1), success)
mstore(0x46c0, 0x0b158cec0a33aa8b715913e039391378e13e9f19c96ed8499b3f94ad88770a88)
                    mstore(0x46e0, 0x23e610900c5b6d0295567f968b932541d47e6640872aab48ee4f3af44b4d27c7)
mstore(0x4700, mload(0x3b40))
success := and(eq(staticcall(gas(), 0x7, 0x46c0, 0x60, 0x46c0, 0x40), 1), success)
mstore(0x4720, mload(0x4640))
                    mstore(0x4740, mload(0x4660))
mstore(0x4760, mload(0x46c0))
                    mstore(0x4780, mload(0x46e0))
success := and(eq(staticcall(gas(), 0x6, 0x4720, 0x80, 0x4720, 0x40), 1), success)
mstore(0x47a0, 0x27f82354e19fc52447f494edf3a18199cb951185111b8480e9f4534a035e35f4)
                    mstore(0x47c0, 0x1997be20b030fda22aae32604d3dcd96a6d83126c1d738ac08306ceef99e8e72)
mstore(0x47e0, mload(0x3b60))
success := and(eq(staticcall(gas(), 0x7, 0x47a0, 0x60, 0x47a0, 0x40), 1), success)
mstore(0x4800, mload(0x4720))
                    mstore(0x4820, mload(0x4740))
mstore(0x4840, mload(0x47a0))
                    mstore(0x4860, mload(0x47c0))
success := and(eq(staticcall(gas(), 0x6, 0x4800, 0x80, 0x4800, 0x40), 1), success)
mstore(0x4880, 0x02510000d53672de37527a38e9115924b417e14b9fc9cf057ec5f976c9c2ff39)
                    mstore(0x48a0, 0x284d0c02fb7466c507d5a2ca4caf3b254c2aec40f5791bfcd32202a1bb352642)
mstore(0x48c0, mload(0x3b80))
success := and(eq(staticcall(gas(), 0x7, 0x4880, 0x60, 0x4880, 0x40), 1), success)
mstore(0x48e0, mload(0x4800))
                    mstore(0x4900, mload(0x4820))
mstore(0x4920, mload(0x4880))
                    mstore(0x4940, mload(0x48a0))
success := and(eq(staticcall(gas(), 0x6, 0x48e0, 0x80, 0x48e0, 0x40), 1), success)
mstore(0x4960, 0x15ada1261f401ccef5204a229637df8a4ed3f5ee66ad9004f8410f6fb4cbc254)
                    mstore(0x4980, 0x0f831bc37c75692cd289bfead1ca4c09ba534c76c01b785e66f516994b5462fe)
mstore(0x49a0, mload(0x3ba0))
success := and(eq(staticcall(gas(), 0x7, 0x4960, 0x60, 0x4960, 0x40), 1), success)
mstore(0x49c0, mload(0x48e0))
                    mstore(0x49e0, mload(0x4900))
mstore(0x4a00, mload(0x4960))
                    mstore(0x4a20, mload(0x4980))
success := and(eq(staticcall(gas(), 0x6, 0x49c0, 0x80, 0x49c0, 0x40), 1), success)
mstore(0x4a40, 0x0fcce1540ab08e74f746f8dc0c5979c777fde23bcf8c43037dbd1995f028371c)
                    mstore(0x4a60, 0x213ff42965bfe39dc486933bbd6b3052df24f30db98356e7fa719ede9e4276f7)
mstore(0x4a80, mload(0x3bc0))
success := and(eq(staticcall(gas(), 0x7, 0x4a40, 0x60, 0x4a40, 0x40), 1), success)
mstore(0x4aa0, mload(0x49c0))
                    mstore(0x4ac0, mload(0x49e0))
mstore(0x4ae0, mload(0x4a40))
                    mstore(0x4b00, mload(0x4a60))
success := and(eq(staticcall(gas(), 0x6, 0x4aa0, 0x80, 0x4aa0, 0x40), 1), success)
mstore(0x4b20, 0x031b308607ae46a9b8f8a121b51e95a25a70e373791b4ff42374809d855f8511)
                    mstore(0x4b40, 0x2545bbdfe700bd9ae3d30a8ae5030ca32d139fe31aafb6ae273fa1bfa94e2eb4)
mstore(0x4b60, mload(0x3be0))
success := and(eq(staticcall(gas(), 0x7, 0x4b20, 0x60, 0x4b20, 0x40), 1), success)
mstore(0x4b80, mload(0x4aa0))
                    mstore(0x4ba0, mload(0x4ac0))
mstore(0x4bc0, mload(0x4b20))
                    mstore(0x4be0, mload(0x4b40))
success := and(eq(staticcall(gas(), 0x6, 0x4b80, 0x80, 0x4b80, 0x40), 1), success)
mstore(0x4c00, 0x305cc88580f4e0612497b868d076010e9cda47ad18addb57e0f3593361b9eae7)
                    mstore(0x4c20, 0x06918ddd94706b013bde670bd38ae00dbe5dfa77ddd2d6aa1fae9d47194135e6)
mstore(0x4c40, mload(0x3c00))
success := and(eq(staticcall(gas(), 0x7, 0x4c00, 0x60, 0x4c00, 0x40), 1), success)
mstore(0x4c60, mload(0x4b80))
                    mstore(0x4c80, mload(0x4ba0))
mstore(0x4ca0, mload(0x4c00))
                    mstore(0x4cc0, mload(0x4c20))
success := and(eq(staticcall(gas(), 0x6, 0x4c60, 0x80, 0x4c60, 0x40), 1), success)
mstore(0x4ce0, mload(0x440))
                    mstore(0x4d00, mload(0x460))
mstore(0x4d20, mload(0x3c20))
success := and(eq(staticcall(gas(), 0x7, 0x4ce0, 0x60, 0x4ce0, 0x40), 1), success)
mstore(0x4d40, mload(0x4c60))
                    mstore(0x4d60, mload(0x4c80))
mstore(0x4d80, mload(0x4ce0))
                    mstore(0x4da0, mload(0x4d00))
success := and(eq(staticcall(gas(), 0x6, 0x4d40, 0x80, 0x4d40, 0x40), 1), success)
mstore(0x4dc0, mload(0x480))
                    mstore(0x4de0, mload(0x4a0))
mstore(0x4e00, mload(0x3c40))
success := and(eq(staticcall(gas(), 0x7, 0x4dc0, 0x60, 0x4dc0, 0x40), 1), success)
mstore(0x4e20, mload(0x4d40))
                    mstore(0x4e40, mload(0x4d60))
mstore(0x4e60, mload(0x4dc0))
                    mstore(0x4e80, mload(0x4de0))
success := and(eq(staticcall(gas(), 0x6, 0x4e20, 0x80, 0x4e20, 0x40), 1), success)
mstore(0x4ea0, mload(0x4c0))
                    mstore(0x4ec0, mload(0x4e0))
mstore(0x4ee0, mload(0x3c60))
success := and(eq(staticcall(gas(), 0x7, 0x4ea0, 0x60, 0x4ea0, 0x40), 1), success)
mstore(0x4f00, mload(0x4e20))
                    mstore(0x4f20, mload(0x4e40))
mstore(0x4f40, mload(0x4ea0))
                    mstore(0x4f60, mload(0x4ec0))
success := and(eq(staticcall(gas(), 0x6, 0x4f00, 0x80, 0x4f00, 0x40), 1), success)
mstore(0x4f80, mload(0x3a0))
                    mstore(0x4fa0, mload(0x3c0))
mstore(0x4fc0, mload(0x3c80))
success := and(eq(staticcall(gas(), 0x7, 0x4f80, 0x60, 0x4f80, 0x40), 1), success)
mstore(0x4fe0, mload(0x4f00))
                    mstore(0x5000, mload(0x4f20))
mstore(0x5020, mload(0x4f80))
                    mstore(0x5040, mload(0x4fa0))
success := and(eq(staticcall(gas(), 0x6, 0x4fe0, 0x80, 0x4fe0, 0x40), 1), success)
mstore(0x5060, mload(0x2a0))
                    mstore(0x5080, mload(0x2c0))
mstore(0x50a0, mload(0x3e20))
success := and(eq(staticcall(gas(), 0x7, 0x5060, 0x60, 0x5060, 0x40), 1), success)
mstore(0x50c0, mload(0x4fe0))
                    mstore(0x50e0, mload(0x5000))
mstore(0x5100, mload(0x5060))
                    mstore(0x5120, mload(0x5080))
success := and(eq(staticcall(gas(), 0x6, 0x50c0, 0x80, 0x50c0, 0x40), 1), success)
mstore(0x5140, mload(0x2e0))
                    mstore(0x5160, mload(0x300))
mstore(0x5180, mload(0x3e40))
success := and(eq(staticcall(gas(), 0x7, 0x5140, 0x60, 0x5140, 0x40), 1), success)
mstore(0x51a0, mload(0x50c0))
                    mstore(0x51c0, mload(0x50e0))
mstore(0x51e0, mload(0x5140))
                    mstore(0x5200, mload(0x5160))
success := and(eq(staticcall(gas(), 0x6, 0x51a0, 0x80, 0x51a0, 0x40), 1), success)
mstore(0x5220, mload(0x320))
                    mstore(0x5240, mload(0x340))
mstore(0x5260, mload(0x3fe0))
success := and(eq(staticcall(gas(), 0x7, 0x5220, 0x60, 0x5220, 0x40), 1), success)
mstore(0x5280, mload(0x51a0))
                    mstore(0x52a0, mload(0x51c0))
mstore(0x52c0, mload(0x5220))
                    mstore(0x52e0, mload(0x5240))
success := and(eq(staticcall(gas(), 0x6, 0x5280, 0x80, 0x5280, 0x40), 1), success)
mstore(0x5300, mload(0x360))
                    mstore(0x5320, mload(0x380))
mstore(0x5340, mload(0x4000))
success := and(eq(staticcall(gas(), 0x7, 0x5300, 0x60, 0x5300, 0x40), 1), success)
mstore(0x5360, mload(0x5280))
                    mstore(0x5380, mload(0x52a0))
mstore(0x53a0, mload(0x5300))
                    mstore(0x53c0, mload(0x5320))
success := and(eq(staticcall(gas(), 0x6, 0x5360, 0x80, 0x5360, 0x40), 1), success)
mstore(0x53e0, mload(0x160))
                    mstore(0x5400, mload(0x180))
mstore(0x5420, mload(0x4100))
success := and(eq(staticcall(gas(), 0x7, 0x53e0, 0x60, 0x53e0, 0x40), 1), success)
mstore(0x5440, mload(0x5360))
                    mstore(0x5460, mload(0x5380))
mstore(0x5480, mload(0x53e0))
                    mstore(0x54a0, mload(0x5400))
success := and(eq(staticcall(gas(), 0x6, 0x5440, 0x80, 0x5440, 0x40), 1), success)
mstore(0x54c0, mload(0xa20))
                    mstore(0x54e0, mload(0xa40))
mstore(0x5500, sub(f_q, mload(0x4140)))
success := and(eq(staticcall(gas(), 0x7, 0x54c0, 0x60, 0x54c0, 0x40), 1), success)
mstore(0x5520, mload(0x5440))
                    mstore(0x5540, mload(0x5460))
mstore(0x5560, mload(0x54c0))
                    mstore(0x5580, mload(0x54e0))
success := and(eq(staticcall(gas(), 0x6, 0x5520, 0x80, 0x5520, 0x40), 1), success)
mstore(0x55a0, mload(0xac0))
                    mstore(0x55c0, mload(0xae0))
mstore(0x55e0, mload(0x4160))
success := and(eq(staticcall(gas(), 0x7, 0x55a0, 0x60, 0x55a0, 0x40), 1), success)
mstore(0x5600, mload(0x5520))
                    mstore(0x5620, mload(0x5540))
mstore(0x5640, mload(0x55a0))
                    mstore(0x5660, mload(0x55c0))
success := and(eq(staticcall(gas(), 0x6, 0x5600, 0x80, 0x5600, 0x40), 1), success)
mstore(0x5680, mload(0x5600))
                    mstore(0x56a0, mload(0x5620))
mstore(0x56c0, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x56e0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x5700, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x5720, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x5740, mload(0xac0))
                    mstore(0x5760, mload(0xae0))
mstore(0x5780, 0x0181624e80f3d6ae28df7e01eaeab1c0e919877a3b8a6b7fbc69a6817d596ea2)
            mstore(0x57a0, 0x1783d30dcb12d259bb89098addf6280fa4b653be7a152542a28f7b926e27e648)
            mstore(0x57c0, 0x00ae44489d41a0d179e2dfdc03bddd883b7109f8b6ae316a59e815c1a6b35304)
            mstore(0x57e0, 0x0b2147ab62a386bd63e6de1522109b8c9588ab466f5aadfde8c41ca3749423ee)
success := and(eq(staticcall(gas(), 0x8, 0x5680, 0x180, 0x5680, 0x20), 1), success)
success := and(eq(mload(0x5680), 1), success)

            // Revert if anything fails
            if iszero(success) { revert(0, 0) }

            // Return empty bytes on success
            return(0, 0)

        }
    }
}